//! HTTP API client for external providers

use crate::error::{ProducerError, ProducerResult};
use crate::traits::ApiClient;
use crate::types::{ApiRequest, ApiResponse};
use async_trait::async_trait;
use rand::seq::SliceRandom;
use rand::thread_rng;
use reqwest::Client;
use serde_json::{json, Value};
use shared::{process_debug, ProcessId, ProviderId, TokenUsage};
use std::collections::HashMap;
use std::time::Instant;
use tracing::{debug, error, info, warn};

/// Word dictionary for Random provider (Shakespeare words from Hamlet)
const RANDOM_WORDS: &[&str] = &[
    "abate",
    "abatements",
    "abhorred",
    "ability",
    "able",
    "aboard",
    "abominably",
    "about",
    "above",
    "abridgement",
    "abroad",
    "absent",
    "absolute",
    "abstinence",
    "abstracts",
    "absurd",
    "abuse",
    "abuses",
    "accent",
    "accepts",
    "access",
    "accident",
    "accidental",
    "accidents",
    "accord",
    "according",
    "account",
    "accounted",
    "accurst",
    "accuse",
    "ache",
    "achievements",
    "acquaint",
    "acquire",
    "acquittance",
    "acres",
    "across",
    "acted",
    "acting",
    "action",
    "actions",
    "actively",
    "actor",
    "actors",
    "acts",
    "adam",
    "adders",
    "addicted",
    "addition",
    "additions",
    "address",
    "adhere",
    "adieu",
    "admirable",
    "admiration",
    "admire",
    "admit",
    "admonishment",
    "advance",
    "advantage",
    "advantageous",
    "advent",
    "adversary",
    "adverse",
    "advertise",
    "advice",
    "affairs",
    "affect",
    "affection",
    "affections",
    "affinity",
    "affirm",
    "afore",
    "aforesaid",
    "afraid",
    "after",
    "afternoon",
    "again",
    "against",
    "aged",
    "agent",
    "ages",
    "aggravate",
    "agone",
    "agree",
    "ague",
    "aims",
    "aires",
    "alarm",
    "alas",
    "albeit",
    "alchemist",
    "ale",
    "alehouse",
    "alert",
    "alexander",
    "alive",
    "allow",
    "almost",
    "alone",
    "along",
    "aloud",
    "already",
    "also",
    "altar",
    "alter",
    "although",
    "always",
    "amazed",
    "amazement",
    "ambassador",
    "ambition",
    "ambitious",
    "amen",
    "amend",
    "amends",
    "amongst",
    "ample",
    "anchor",
    "ancient",
    "angel",
    "angels",
    "anger",
    "angle",
    "angry",
    "anguish",
    "animal",
    "animals",
    "ankle",
    "annex",
    "another",
    "answer",
    "answered",
    "answering",
    "answers",
    "antic",
    "antique",
    "antres",
    "apes",
    "apology",
    "apparition",
    "appear",
    "appeared",
    "appears",
    "appease",
    "appetite",
    "applaud",
    "apple",
    "application",
    "apply",
    "appoint",
    "appointed",
    "apprehend",
    "apprehension",
    "approach",
    "approached",
    "approaches",
    "approve",
    "approved",
    "aptly",
    "arbitrary",
    "arched",
    "argument",
    "arguments",
    "arise",
    "arithmetic",
    "armed",
    "armies",
    "armour",
    "arms",
    "army",
    "around",
    "arouse",
    "arrange",
    "arrest",
    "arrivance",
    "arrive",
    "arrived",
    "arrows",
    "artery",
    "article",
    "artless",
    "arts",
    "ascend",
    "ashamed",
    "aside",
    "asked",
    "asleep",
    "aspect",
    "ass",
    "assail",
    "assault",
    "assay",
    "assemble",
    "assembly",
    "assent",
    "assist",
    "associate",
    "assurance",
    "assure",
    "assured",
    "astonish",
    "asunder",
    "ate",
    "atmosphere",
    "attach",
    "attack",
    "attempt",
    "attempted",
    "attend",
    "attendance",
    "attendant",
    "attendants",
    "attending",
    "attends",
    "attention",
    "attentive",
    "attire",
    "attorney",
    "attract",
    "audible",
    "audience",
    "audit",
    "augment",
    "aunt",
    "authentic",
    "author",
    "authority",
    "authorize",
    "auto",
    "autumn",
    "avail",
    "available",
    "avaunt",
    "avoid",
    "await",
    "awake",
    "awaken",
    "aware",
    "away",
    "aweary",
    "awful",
    "awkward",
    "axe",
    "baby",
    "bachelor",
    "back",
    "backward",
    "bad",
    "badge",
    "badly",
    "baffle",
    "baggage",
    "bait",
    "balance",
    "baleful",
    "ball",
    "balm",
    "ban",
    "band",
    "bandy",
    "bane",
    "banish",
    "bank",
    "bankrupt",
    "banner",
    "banquet",
    "bar",
    "bare",
    "barely",
    "bargain",
    "bark",
    "barren",
    "base",
    "bashful",
    "basis",
    "bastard",
    "bat",
    "batch",
    "bathe",
    "battle",
    "bawdy",
    "bay",
    "beach",
    "beacon",
    "beam",
    "bear",
    "beard",
    "bearer",
    "bearing",
    "bears",
    "beast",
    "beat",
    "beaten",
    "beating",
    "beats",
    "beautiful",
    "beauty",
    "became",
    "because",
    "become",
    "becomes",
    "becoming",
    "bed",
    "bedded",
    "bedroom",
    "beds",
    "bee",
    "beef",
    "been",
    "beer",
    "before",
    "beg",
    "began",
    "beggar",
    "beggarly",
    "begging",
    "begin",
    "beginning",
    "begins",
    "begot",
    "behalf",
    "behave",
    "behavior",
    "behaviour",
    "behind",
    "behold",
    "being",
    "belief",
    "believe",
    "bell",
    "belly",
    "belong",
    "beloved",
    "below",
    "belt",
    "bench",
    "bend",
    "beneath",
    "benefit",
    "bent",
    "bereave",
    "beseech",
    "beset",
    "beside",
    "besides",
    "best",
    "bestow",
    "betray",
    "better",
    "between",
    "bewail",
    "beware",
    "beyond",
    "bid",
    "bide",
    "big",
    "bigness",
    "bill",
    "bind",
    "bird",
    "birds",
    "birth",
    "birthday",
    "bit",
    "bite",
    "bitter",
    "black",
    "blade",
    "blame",
    "blank",
    "blanket",
    "blast",
    "blaze",
    "bleak",
    "bleed",
    "bleeding",
    "bless",
    "blessed",
    "blessing",
    "blind",
    "blood",
    "bloody",
    "bloom",
    "blossom",
    "blow",
    "blown",
    "blows",
    "blue",
    "blunt",
    "blush",
    "boar",
    "board",
    "boast",
    "boat",
    "bodies",
    "body",
    "bold",
    "boldness",
    "bone",
    "bones",
    "bonnet",
    "book",
    "books",
    "boot",
    "born",
    "borne",
    "bosom",
    "both",
    "bottom",
    "bought",
    "bound",
    "bounty",
    "bow",
    "bowl",
    "box",
    "boy",
    "boys",
    "brace",
    "brain",
    "brains",
    "brake",
    "branch",
    "brand",
    "brass",
    "brave",
    "bravely",
    "bravery",
    "brawl",
    "bread",
    "breadth",
    "break",
    "breakfast",
    "breaking",
    "breaks",
    "breast",
    "breath",
    "breathe",
    "breathing",
    "bred",
    "breed",
    "breeding",
    "breeds",
    "brief",
    "briefly",
    "bright",
    "brighten",
    "brighter",
    "brightly",
    "bring",
    "bringing",
    "brings",
    "broad",
    "broke",
    "broken",
    "brook",
    "brother",
    "brothers",
    "brought",
    "brow",
    "brown",
    "bruise",
    "brute",
    "buck",
    "buckle",
    "bud",
    "budget",
    "bug",
    "build",
    "building",
    "bulk",
    "bull",
    "bullet",
    "bunch",
    "bundle",
    "burden",
    "burn",
    "burning",
    "burnt",
    "burst",
    "bury",
    "bush",
    "business",
    "busy",
    "but",
    "butter",
    "button",
    "buy",
    "buzz",
    "by",
    "cabin",
    "cage",
    "cake",
    "calculate",
    "call",
    "called",
    "calling",
    "calls",
    "calm",
    "came",
    "camp",
    "can",
    "cancel",
    "candle",
    "cannon",
    "cannot",
    "canopy",
    "capable",
    "capacity",
    "capital",
    "captain",
    "captive",
    "car",
    "card",
    "care",
    "career",
    "careful",
    "carefully",
    "careless",
    "cargo",
    "carry",
    "carrying",
    "cart",
    "carve",
    "case",
    "cash",
    "cast",
    "castle",
    "casual",
    "cat",
    "catch",
    "cause",
    "caused",
    "causes",
    "caution",
    "cave",
    "cease",
    "ceiling",
    "celebrate",
    "cell",
    "center",
    "centre",
    "century",
    "ceremony",
    "certain",
    "certainly",
    "chain",
    "chair",
    "challenge",
    "chamber",
    "chance",
    "change",
    "changed",
    "changes",
    "changing",
    "channel",
    "chant",
    "chaos",
    "chapter",
    "character",
    "charge",
    "charged",
    "charges",
    "charity",
    "charm",
    "chase",
    "cheap",
    "cheat",
    "check",
    "cheek",
    "cheer",
    "cheese",
    "chest",
    "chew",
    "chicken",
    "chief",
    "chiefly",
    "child",
    "children",
    "chill",
    "chin",
    "choice",
    "choose",
    "chose",
    "chosen",
    "church",
    "circle",
    "circumstances",
    "citizen",
    "city",
    "civil",
    "claim",
    "clap",
    "class",
    "clean",
    "clear",
    "clearly",
    "clerk",
    "clever",
    "climb",
    "cloak",
    "clock",
    "close",
    "closed",
    "closely",
    "closer",
    "closet",
    "cloth",
    "clothe",
    "clothes",
    "cloud",
    "clouds",
    "cloudy",
    "clown",
    "club",
    "coach",
    "coal",
    "coarse",
    "coast",
    "coat",
    "code",
    "coin",
    "cold",
    "collect",
    "college",
    "color",
    "colour",
    "come",
    "comes",
    "comfort",
    "comfortable",
    "coming",
    "command",
    "commander",
    "comment",
    "commission",
    "commit",
    "common",
    "commonly",
    "companion",
    "company",
    "compare",
    "comparison",
    "compass",
    "compel",
    "compete",
    "complain",
    "complaint",
    "complete",
    "completely",
    "compose",
    "compound",
    "concern",
    "concerning",
    "conclude",
    "conclusion",
    "condition",
    "conduct",
    "conference",
    "confess",
    "confidence",
    "confident",
    "confine",
    "confirm",
    "conflict",
    "confound",
    "confuse",
    "confusion",
    "congress",
    "conjure",
    "connect",
    "connection",
    "conquer",
    "conscience",
    "conscious",
    "consent",
    "consequence",
    "consequently",
    "consider",
    "considerable",
    "consideration",
    "consist",
    "console",
    "conspiracy",
    "constant",
    "constantly",
    "constitute",
    "construction",
    "consult",
    "consume",
    "contact",
    "contain",
    "contempt",
    "content",
    "contents",
    "contest",
    "continue",
    "contract",
    "contrary",
    "contrast",
    "contribute",
    "control",
    "conversation",
    "convert",
    "convince",
    "cook",
    "cool",
    "cope",
    "copper",
    "copy",
    "cord",
    "corn",
    "corner",
    "correct",
    "cost",
    "cottage",
    "cotton",
    "couch",
    "cough",
    "could",
    "council",
    "counsel",
    "count",
    "counter",
    "country",
    "county",
    "couple",
    "courage",
    "course",
    "court",
    "cousin",
    "cover",
    "covered",
    "cow",
    "crack",
    "craft",
    "crash",
    "crazy",
    "cream",
    "create",
    "creature",
    "credit",
    "crew",
    "crime",
    "crisis",
    "critical",
    "crop",
    "cross",
    "crowd",
    "crown",
    "cruel",
    "crush",
    "cry",
    "crying",
    "crystal",
    "cup",
    "cure",
    "curious",
    "current",
    "curse",
    "cursed",
    "curtain",
    "curve",
    "custom",
    "cut",
    "cutting",
    "cycle",
    "daily",
    "dam",
    "damage",
    "dame",
    "damp",
    "dance",
    "dancing",
    "danger",
    "dangerous",
    "dare",
    "daring",
    "dark",
    "darkness",
    "darling",
    "dash",
    "data",
    "date",
    "daughter",
    "dawn",
    "day",
    "days",
    "dead",
    "deadly",
    "deaf",
    "deal",
    "dealing",
    "dear",
    "dearly",
    "death",
    "debate",
    "debt",
    "decay",
    "deceive",
    "decide",
    "decision",
    "deck",
    "declare",
    "decline",
    "decorate",
    "decree",
    "deed",
    "deeds",
    "deep",
    "deeply",
    "deer",
    "defeat",
    "defend",
    "defense",
    "degree",
    "delay",
    "deliberate",
    "delicate",
    "delight",
    "deliver",
    "delivery",
    "demand",
    "demonstrate",
    "den",
    "deny",
    "depart",
    "depend",
    "depth",
    "derive",
    "descend",
    "describe",
    "description",
    "desert",
    "deserve",
    "design",
    "desire",
    "desk",
    "despair",
    "desperate",
    "despite",
    "destroy",
    "destruction",
    "detail",
    "determine",
    "develop",
    "development",
    "device",
    "devil",
    "devise",
    "devote",
    "devotion",
    "diamond",
    "die",
    "died",
    "dies",
    "diet",
    "differ",
    "difference",
    "different",
    "difficult",
    "difficulty",
    "dig",
    "dignity",
    "dim",
    "dine",
    "dinner",
    "direct",
    "direction",
    "directly",
    "director",
    "dirty",
    "disappear",
    "discover",
    "discovery",
    "discuss",
    "discussion",
    "disease",
    "disgrace",
    "dish",
    "dismiss",
    "display",
    "dispose",
    "distance",
    "distant",
    "distinguish",
    "distribute",
    "district",
    "disturb",
    "dive",
    "divide",
    "division",
    "dock",
    "doctor",
    "document",
    "dog",
    "domestic",
    "done",
    "door",
    "doors",
    "dot",
    "double",
    "doubt",
    "down",
    "dozen",
    "draft",
    "drag",
    "dragon",
    "drain",
    "drama",
    "dramatic",
    "draw",
    "drawing",
    "drawn",
    "dread",
    "dream",
    "dress",
    "dressed",
    "drew",
    "dried",
    "drink",
    "drinking",
    "drive",
    "driven",
    "driver",
    "drop",
    "dropped",
    "drove",
    "drown",
    "drug",
    "drum",
    "drunk",
    "dry",
    "duck",
    "due",
    "dull",
    "duly",
    "dump",
    "during",
    "dust",
    "duty",
    "dwell",
    "dying",
    "each",
    "eager",
    "ear",
    "earl",
    "early",
    "earn",
    "earth",
    "ease",
    "easily",
    "east",
    "eastern",
    "easy",
    "eat",
    "eating",
    "echo",
    "edge",
    "educate",
    "education",
    "effect",
    "effective",
    "effort",
    "egg",
    "either",
    "elect",
    "election",
    "electric",
    "element",
    "elephant",
    "eleven",
    "else",
    "elsewhere",
    "emerge",
    "emergency",
    "emotion",
    "emperor",
    "emphasis",
    "employ",
    "employee",
    "employment",
    "empty",
    "enable",
    "encounter",
    "encourage",
    "end",
    "ending",
    "enemy",
    "energy",
    "enforce",
    "engage",
    "engine",
    "engineer",
    "english",
    "enjoy",
    "enormous",
    "enough",
    "enquire",
    "ensure",
    "enter",
    "enterprise",
    "entertainment",
    "entire",
    "entirely",
    "entitle",
    "entrance",
    "entry",
    "envelope",
    "environment",
    "equal",
    "equally",
    "equipment",
    "error",
    "escape",
    "especially",
    "essential",
    "establish",
    "estate",
    "estimate",
    "eternal",
    "european",
    "even",
    "evening",
    "event",
    "eventually",
    "ever",
    "every",
    "everybody",
    "everyone",
    "everything",
    "everywhere",
    "evidence",
    "evil",
    "exact",
    "exactly",
    "examine",
    "example",
    "exceed",
    "excellent",
    "except",
    "exception",
    "exchange",
    "excitement",
    "exciting",
    "exclude",
    "excuse",
    "execute",
    "executive",
    "exercise",
    "exist",
    "existence",
    "existing",
    "exit",
    "expand",
    "expect",
    "expectation",
    "expense",
    "expensive",
    "experience",
    "experiment",
    "expert",
    "explain",
    "explanation",
    "explore",
    "explosion",
    "export",
    "expose",
    "express",
    "expression",
    "extend",
    "extension",
    "extensive",
    "extent",
    "external",
    "extra",
    "extraordinary",
    "extreme",
    "extremely",
    "eye",
    "eyes",
    "face",
    "facing",
    "fact",
    "factor",
    "factory",
    "fail",
    "failure",
    "fair",
    "fairly",
    "faith",
    "fall",
    "fallen",
    "falling",
    "false",
    "familiar",
    "family",
    "famous",
    "fancy",
    "fantastic",
    "far",
    "farm",
    "farmer",
    "farming",
    "fashion",
    "fast",
    "fat",
    "fate",
    "father",
    "fault",
    "favour",
    "favourite",
    "fear",
    "feature",
    "february",
    "federal",
    "fee",
    "feed",
    "feel",
    "feeling",
    "feet",
    "fell",
    "fellow",
    "felt",
    "female",
    "fence",
    "festival",
    "fetch",
    "fever",
    "few",
    "field",
    "fifteen",
    "fifty",
    "fight",
    "fighting",
    "figure",
    "file",
    "fill",
    "film",
    "final",
    "finally",
    "finance",
    "financial",
    "find",
    "finding",
    "fine",
    "finger",
    "finish",
    "fire",
    "firm",
    "first",
    "fish",
    "fishing",
    "fit",
    "fitting",
    "five",
    "fix",
    "fixed",
    "flag",
    "flame",
    "flash",
    "flat",
    "flavour",
    "flesh",
    "flight",
    "float",
    "flood",
    "floor",
    "flow",
    "flower",
    "flowers",
    "fly",
    "flying",
    "focus",
    "folk",
    "follow",
    "following",
    "food",
    "fool",
    "foot",
    "football",
    "for",
    "force",
    "foreign",
    "forest",
    "forever",
    "forget",
    "forgive",
    "fork",
    "form",
    "formal",
    "former",
    "formula",
    "forth",
    "fortunate",
    "fortune",
    "forty",
    "forward",
    "found",
    "foundation",
    "four",
    "fourteen",
    "fourth",
    "frame",
    "france",
    "frank",
    "free",
    "freedom",
    "freeze",
    "freight",
    "french",
    "frequent",
    "fresh",
    "friday",
    "friend",
    "friendly",
    "friendship",
    "frighten",
    "from",
    "front",
    "fruit",
    "fuel",
    "full",
    "fully",
    "fun",
    "function",
    "fund",
    "funeral",
    "funny",
    "further",
    "furthermore",
    "future",
    "gain",
    "game",
    "gang",
    "gap",
    "garage",
    "garden",
    "gas",
    "gate",
    "gather",
    "gave",
    "general",
    "generally",
    "generate",
    "generation",
    "generous",
    "gentle",
    "gentleman",
    "gently",
    "genuine",
    "german",
    "germany",
    "get",
    "getting",
    "gift",
    "girl",
    "give",
    "given",
    "giving",
    "glad",
    "glass",
    "glory",
    "goal",
    "god",
    "goes",
    "going",
    "gold",
    "golden",
    "golf",
    "gone",
    "good",
    "goods",
    "got",
    "govern",
    "government",
    "grace",
    "grade",
    "gradually",
    "grain",
    "grand",
    "grant",
    "grass",
    "grave",
    "gray",
    "great",
    "greater",
    "greatest",
    "greatly",
    "green",
    "grey",
    "grip",
    "gross",
    "ground",
    "group",
    "grow",
    "growing",
    "grown",
    "growth",
    "guarantee",
    "guard",
    "guess",
    "guest",
    "guide",
    "gun",
    "guy",
    "habit",
    "had",
    "hair",
    "half",
    "hall",
    "hand",
    "handle",
    "hands",
    "hang",
    "happen",
    "happened",
    "happening",
    "happy",
    "hard",
    "hardly",
    "harm",
    "hat",
    "hate",
    "have",
    "having",
    "head",
    "heading",
    "health",
    "healthy",
    "hear",
    "heard",
    "hearing",
    "heart",
    "heat",
    "heating",
    "heaven",
    "heavily",
    "heavy",
    "heel",
    "height",
    "held",
    "hell",
    "help",
    "helpful",
    "hence",
    "her",
    "here",
    "herself",
    "hide",
    "high",
    "highly",
    "hill",
    "him",
    "himself",
    "hire",
    "his",
    "historic",
    "historical",
    "history",
    "hit",
    "hold",
    "holding",
    "hole",
    "holiday",
    "holy",
    "home",
    "honest",
    "honey",
    "honour",
    "hope",
    "hoping",
    "horrible",
    "horror",
    "horse",
    "hospital",
    "host",
    "hot",
    "hotel",
    "hour",
    "hours",
    "house",
    "household",
    "housing",
    "how",
    "however",
    "huge",
    "human",
    "hundred",
    "hung",
    "hunt",
    "hunting",
    "hurt",
    "husband",
    "ice",
    "idea",
    "ideal",
    "identify",
    "identity",
    "ignore",
    "ill",
    "illegal",
    "illness",
    "image",
    "imagine",
    "immediate",
    "immediately",
    "impact",
    "implement",
    "implication",
    "imply",
    "import",
    "importance",
    "important",
    "impose",
    "impossible",
    "impress",
    "impression",
    "improve",
    "improvement",
    "inch",
    "include",
    "including",
    "income",
    "increase",
    "increasingly",
    "indeed",
    "independence",
    "independent",
    "index",
    "indicate",
    "indication",
    "individual",
    "industrial",
    "industry",
    "inevitable",
    "influence",
    "inform",
    "information",
    "initial",
    "initially",
    "initiative",
    "injury",
    "inner",
    "innocent",
    "input",
    "inquiry",
    "inside",
    "insist",
    "inspire",
    "install",
    "instance",
    "instant",
    "instead",
    "institute",
    "institution",
    "instruction",
    "instrument",
    "insurance",
    "intelligence",
    "intelligent",
    "intend",
    "intended",
    "intention",
    "interact",
    "interaction",
    "interest",
    "interested",
    "interesting",
    "internal",
    "international",
    "internet",
    "interpret",
    "interpretation",
    "interview",
    "into",
    "introduce",
    "introduction",
    "invest",
    "investigation",
    "investment",
    "invite",
    "involve",
    "involved",
    "involvement",
    "iron",
    "island",
    "issue",
    "item",
    "its",
    "itself",
    "jacket",
    "january",
    "job",
    "join",
    "joint",
    "joke",
    "journal",
    "journey",
    "joy",
    "judge",
    "judgment",
    "july",
    "jump",
    "june",
    "junior",
    "jury",
    "just",
    "justice",
    "justify",
    "keen",
    "keep",
    "keeping",
    "kept",
    "key",
    "keyboard",
    "kick",
    "kid",
    "kill",
    "killing",
    "kilometre",
    "kind",
    "king",
    "kitchen",
    "knee",
    "knife",
    "knock",
    "know",
    "knowing",
    "knowledge",
    "known",
    "labour",
    "lack",
    "lady",
    "lake",
    "land",
    "landscape",
    "lane",
    "language",
    "large",
    "largely",
    "larger",
    "last",
    "late",
    "later",
    "latter",
    "laugh",
    "laughter",
    "launch",
    "law",
    "lay",
    "lead",
    "leader",
    "leadership",
    "leading",
    "league",
    "lean",
    "learn",
    "learning",
    "least",
    "leather",
    "leave",
    "leaving",
    "led",
    "left",
    "leg",
    "legal",
    "length",
    "less",
    "lesson",
    "let",
    "letter",
    "level",
    "liability",
    "liberal",
    "library",
    "licence",
    "license",
    "lie",
    "life",
    "lift",
    "light",
    "lighting",
    "like",
    "likely",
    "limit",
    "limited",
    "line",
    "link",
    "lion",
    "lip",
    "list",
    "listen",
    "literature",
    "little",
    "live",
    "living",
    "load",
    "loan",
    "lobby",
    "local",
    "locate",
    "location",
    "lock",
    "lodge",
    "logic",
    "logical",
    "london",
    "lone",
    "lonely",
    "long",
    "longer",
    "look",
    "looking",
    "loose",
    "lord",
    "lose",
    "losing",
    "loss",
    "lost",
    "lot",
    "lots",
    "loud",
    "love",
    "lovely",
    "lover",
    "low",
    "lower",
    "luck",
    "lucky",
    "lunch",
    "machine",
    "machinery",
    "mad",
    "made",
    "magazine",
    "magic",
    "magnetic",
    "magnificent",
    "mail",
    "main",
    "mainly",
    "maintain",
    "maintenance",
    "major",
    "majority",
    "make",
    "making",
    "male",
    "man",
    "manage",
    "management",
    "manager",
    "manner",
    "manufacturing",
    "many",
    "map",
    "march",
    "mark",
    "market",
    "marketing",
    "marriage",
    "married",
    "marry",
    "mass",
    "massive",
    "master",
    "match",
    "matching",
    "material",
    "mathematics",
    "matter",
    "maximum",
    "may",
    "maybe",
    "mayor",
    "meal",
    "mean",
    "meaning",
    "means",
    "meanwhile",
    "measure",
    "measurement",
    "meat",
    "mechanism",
    "medical",
    "medicine",
    "medium",
    "meet",
    "meeting",
    "member",
    "membership",
    "memory",
    "mental",
    "mention",
    "menu",
    "mere",
    "merely",
    "mess",
    "message",
    "metal",
    "method",
    "metre",
    "middle",
    "might",
    "mild",
    "mile",
    "military",
    "milk",
    "mill",
    "million",
    "mind",
    "mine",
    "minimum",
    "mining",
    "minister",
    "ministry",
    "minor",
    "minority",
    "minute",
    "minutes",
    "miracle",
    "mirror",
    "miss",
    "missing",
    "mission",
    "mistake",
    "mix",
    "mixed",
    "mixture",
    "mobile",
    "mode",
    "model",
    "moderate",
    "modern",
    "modest",
    "modify",
    "moment",
    "monday",
    "money",
    "monitor",
    "month",
    "monthly",
    "mood",
    "moon",
    "moral",
    "more",
    "moreover",
    "morning",
    "most",
    "mostly",
    "mother",
    "motion",
    "motor",
    "mount",
    "mountain",
    "mouse",
    "mouth",
    "move",
    "movement",
    "moving",
    "much",
    "mud",
    "multiple",
    "murder",
    "muscle",
    "museum",
    "music",
    "musical",
    "musician",
    "must",
    "mutual",
    "myself",
    "mystery",
    "nail",
    "name",
    "narrow",
    "nation",
    "national",
    "native",
    "natural",
    "naturally",
    "nature",
    "near",
    "nearby",
    "nearly",
    "neat",
    "necessarily",
    "necessary",
    "neck",
    "need",
    "negative",
    "negotiate",
    "negotiation",
    "neighbour",
    "neighbourhood",
    "neither",
    "nerve",
    "nervous",
    "nest",
    "net",
    "network",
    "neutral",
    "never",
    "nevertheless",
    "new",
    "news",
    "newspaper",
    "next",
    "nice",
    "night",
    "nine",
    "nineteen",
    "ninety",
    "nobody",
    "nod",
    "noise",
    "none",
    "nonsense",
    "noon",
    "nor",
    "normal",
    "normally",
    "north",
    "northern",
    "nose",
    "not",
    "notable",
    "note",
    "nothing",
    "notice",
    "notion",
    "novel",
    "now",
    "nowhere",
    "nuclear",
    "number",
    "numerous",
    "nurse",
    "object",
    "objective",
    "obligation",
    "observation",
    "observe",
    "obtain",
    "obvious",
    "obviously",
    "occasion",
    "occasional",
    "occasionally",
    "occupy",
    "occur",
    "ocean",
    "october",
    "odd",
    "odds",
    "off",
    "offence",
    "offend",
    "offer",
    "office",
    "officer",
    "official",
    "often",
    "oil",
    "okay",
    "old",
    "older",
    "oldest",
    "on",
    "once",
    "one",
    "ongoing",
    "only",
    "onto",
    "open",
    "opening",
    "operate",
    "operating",
    "operation",
    "operator",
    "opinion",
    "opportunity",
    "oppose",
    "opposite",
    "opposition",
    "option",
    "or",
    "oral",
    "orange",
    "order",
    "ordinary",
    "organ",
    "organisation",
    "organize",
    "origin",
    "original",
    "originally",
    "other",
    "others",
    "otherwise",
    "ought",
    "our",
    "ours",
    "ourselves",
    "out",
    "outcome",
    "outdoor",
    "outer",
    "outline",
    "output",
    "outside",
    "outstanding",
    "over",
    "overall",
    "overcome",
    "overlook",
    "owe",
    "own",
    "owner",
    "ownership",
    "pace",
    "pack",
    "package",
    "packet",
    "page",
    "pain",
    "painful",
    "paint",
    "painting",
    "pair",
    "palace",
    "pale",
    "pan",
    "panel",
    "paper",
    "paragraph",
    "parallel",
    "parent",
    "park",
    "parking",
    "parliament",
    "part",
    "particular",
    "particularly",
    "partly",
    "partner",
    "partnership",
    "party",
    "pass",
    "passage",
    "passenger",
    "passing",
    "passion",
    "passport",
    "past",
    "path",
    "patience",
    "patient",
    "pattern",
    "pause",
    "pay",
    "payment",
    "peace",
    "peaceful",
    "peak",
    "pen",
    "penalty",
    "pension",
    "people",
    "pepper",
    "per",
    "perceived",
    "percentage",
    "perfect",
    "perfectly",
    "perform",
    "performance",
    "perhaps",
    "period",
    "permanent",
    "permission",
    "permit",
    "person",
    "personal",
    "personality",
    "personally",
    "personnel",
    "perspective",
    "persuade",
    "pet",
    "petrol",
    "phase",
    "philosophy",
    "phone",
    "photo",
    "photograph",
    "photographer",
    "photography",
    "phrase",
    "physical",
    "physically",
    "piano",
    "pick",
    "picture",
    "piece",
    "pig",
    "pile",
    "pilot",
    "pin",
    "pink",
    "pipe",
    "pitch",
    "place",
    "plan",
    "plane",
    "planet",
    "planning",
    "plant",
    "plastic",
    "plate",
    "platform",
    "play",
    "player",
    "playing",
    "pleasant",
    "please",
    "pleased",
    "pleasure",
    "plenty",
    "plot",
    "plus",
    "pocket",
    "poem",
    "poet",
    "poetry",
    "point",
    "pointing",
    "police",
    "policy",
    "political",
    "politically",
    "politician",
    "politics",
    "poll",
    "pollution",
    "pool",
    "poor",
    "popular",
    "population",
    "port",
    "portrait",
    "position",
    "positive",
    "possess",
    "possession",
    "possibility",
    "possible",
    "possibly",
    "post",
    "pot",
    "potato",
    "potential",
    "pound",
    "pour",
    "poverty",
    "power",
    "powerful",
    "practical",
    "practice",
    "praise",
    "pray",
    "prayer",
    "precise",
    "predict",
    "prefer",
    "preference",
    "pregnant",
    "premises",
    "premium",
    "preparation",
    "prepare",
    "prepared",
    "prescription",
    "presence",
    "present",
    "presentation",
    "preserve",
    "president",
    "press",
    "pressure",
    "pretty",
    "prevent",
    "previous",
    "previously",
    "price",
    "pride",
    "priest",
    "primarily",
    "primary",
    "prime",
    "prince",
    "princess",
    "principal",
    "principle",
    "print",
    "prior",
    "priority",
    "prison",
    "prisoner",
    "private",
    "probably",
    "problem",
    "procedure",
    "proceed",
    "process",
    "produce",
    "producer",
    "product",
    "production",
    "professional",
    "professor",
    "profit",
    "program",
    "programme",
    "progress",
    "project",
    "promise",
    "promote",
    "promotion",
    "prompt",
    "proof",
    "proper",
    "properly",
    "property",
    "proportion",
    "proposal",
    "propose",
    "prospect",
    "protect",
    "protection",
    "protest",
    "proud",
    "prove",
    "provide",
    "provision",
    "pub",
    "public",
    "publication",
    "publicity",
    "publicly",
    "publish",
    "pull",
    "punish",
    "punishment",
    "pupil",
    "purchase",
    "pure",
    "purpose",
    "pursue",
    "push",
    "put",
    "putting",
    "qualify",
    "quality",
    "quantity",
    "quarter",
    "queen",
    "question",
    "quick",
    "quickly",
    "quiet",
    "quietly",
    "quit",
    "quite",
    "quote",
    "race",
    "racing",
    "radio",
    "rail",
    "railway",
    "rain",
    "raise",
    "raising",
    "range",
    "rank",
    "rapid",
    "rapidly",
    "rare",
    "rarely",
    "rate",
    "rather",
    "rating",
    "ratio",
    "raw",
    "reach",
    "react",
    "reaction",
    "read",
    "reader",
    "reading",
    "ready",
    "real",
    "realise",
    "reality",
    "realize",
    "really",
    "reason",
    "reasonable",
    "reasonably",
    "reassure",
    "recall",
    "receive",
    "recent",
    "recently",
    "reception",
    "recognise",
    "recognition",
    "recognize",
    "recommend",
    "recommendation",
    "record",
    "recording",
    "recover",
    "recovery",
    "red",
    "reduce",
    "reduction",
    "refer",
    "reference",
    "reflect",
    "reflection",
    "reform",
    "refuse",
    "regard",
    "regarding",
    "regardless",
    "region",
    "regional",
    "register",
    "registration",
    "regular",
    "regularly",
    "regulation",
    "reject",
    "relate",
    "related",
    "relation",
    "relationship",
    "relative",
    "relatively",
    "relax",
    "release",
    "relevant",
    "reliable",
    "relief",
    "religion",
    "religious",
    "reluctant",
    "rely",
    "remain",
    "remaining",
    "remains",
    "remark",
    "remarkable",
    "remember",
    "remind",
    "removal",
    "remove",
    "rent",
    "repair",
    "repeat",
    "replace",
    "reply",
    "report",
    "represent",
    "representation",
    "representative",
    "reputation",
    "request",
    "require",
    "requirement",
    "rescue",
    "research",
    "reserve",
    "resident",
    "resolve",
    "resort",
    "resource",
    "respect",
    "respond",
    "response",
    "responsibility",
    "responsible",
    "rest",
    "restaurant",
    "restore",
    "restrict",
    "restriction",
    "result",
    "retain",
    "retire",
    "retirement",
    "return",
    "reveal",
    "revenue",
    "reverse",
    "review",
    "revolution",
    "reward",
    "rich",
    "rid",
    "ride",
    "riding",
    "right",
    "ring",
    "rise",
    "rising",
    "risk",
    "rival",
    "river",
    "road",
    "rob",
    "robot",
    "rock",
    "role",
    "roll",
    "romantic",
    "roof",
    "room",
    "root",
    "rope",
    "rose",
    "rough",
    "roughly",
    "round",
    "route",
    "routine",
    "row",
    "royal",
    "rub",
    "rubber",
    "rubbish",
    "rude",
    "rugby",
    "rule",
    "ruling",
    "rumour",
    "run",
    "running",
    "rural",
    "rush",
    "russian",
    "sad",
    "safe",
    "safety",
    "sail",
    "sailing",
    "saint",
    "sake",
    "salad",
    "salary",
    "sale",
    "sales",
    "salt",
    "same",
    "sample",
    "satisfy",
    "sauce",
    "save",
    "saving",
    "savings",
    "say",
    "scale",
    "scandal",
    "scared",
    "scenario",
    "scene",
    "schedule",
    "scheme",
    "scholarship",
    "school",
    "science",
    "scientific",
    "scientist",
    "scope",
    "score",
    "scottish",
    "screen",
    "script",
    "sculpture",
    "sea",
    "search",
    "season",
    "seat",
    "second",
    "secondary",
    "secondly",
    "secret",
    "secretary",
    "section",
    "sector",
    "secure",
    "security",
    "see",
    "seed",
    "seek",
    "seem",
    "seen",
    "select",
    "selection",
    "self",
    "sell",
    "selling",
    "semester",
    "semi",
    "senate",
    "senator",
    "send",
    "senior",
    "sense",
    "sensible",
    "sensitive",
    "sent",
    "sentence",
    "separate",
    "september",
    "sequence",
    "series",
    "serious",
    "seriously",
    "servant",
    "serve",
    "service",
    "session",
    "set",
    "setting",
    "settle",
    "settlement",
    "setup",
    "seven",
    "seventeen",
    "seventy",
    "several",
    "severe",
    "sex",
    "sexual",
    "shade",
    "shadow",
    "shake",
    "shall",
    "shame",
    "shape",
    "share",
    "sharp",
    "shed",
    "sheep",
    "sheet",
    "shelf",
    "shell",
    "shelter",
    "shift",
    "shine",
    "ship",
    "shirt",
    "shock",
    "shoe",
    "shoot",
    "shooting",
    "shop",
    "shopping",
    "shore",
    "short",
    "shortly",
    "shot",
    "should",
    "shoulder",
    "shout",
    "show",
    "showing",
    "shown",
    "shut",
    "sick",
    "side",
    "sight",
    "sign",
    "signal",
    "significance",
    "significant",
    "significantly",
    "silence",
    "silent",
    "silly",
    "silver",
    "similar",
    "similarly",
    "simple",
    "simply",
    "sin",
    "since",
    "sing",
    "singer",
    "singing",
    "single",
    "sink",
    "sir",
    "sister",
    "sit",
    "site",
    "sitting",
    "situation",
    "six",
    "sixteen",
    "sixty",
    "size",
    "skill",
    "skin",
    "sky",
    "slave",
    "sleep",
    "sleeping",
    "slide",
    "slight",
    "slightly",
    "slip",
    "slow",
    "slowly",
    "small",
    "smaller",
    "smart",
    "smell",
    "smile",
    "smoke",
    "smoking",
    "smooth",
    "snap",
    "snow",
    "soap",
    "so",
    "social",
    "society",
    "sock",
    "soft",
    "software",
    "soil",
    "soldier",
    "sole",
    "solid",
    "solution",
    "solve",
    "some",
    "somebody",
    "somehow",
    "someone",
    "something",
    "sometimes",
    "somewhat",
    "somewhere",
    "son",
    "song",
    "soon",
    "sophisticated",
    "sorry",
    "sort",
    "soul",
    "sound",
    "soup",
    "source",
    "south",
    "southern",
    "space",
    "spare",
    "speak",
    "speaker",
    "speaking",
    "special",
    "specialist",
    "specially",
    "species",
    "specific",
    "specifically",
    "speech",
    "speed",
    "spell",
    "spend",
    "spending",
    "spent",
    "spin",
    "spirit",
    "spiritual",
    "spite",
    "split",
    "spoke",
    "spoken",
    "sponsor",
    "sport",
    "spot",
    "spread",
    "spring",
    "square",
    "stable",
    "stack",
    "staff",
    "stage",
    "stair",
    "stake",
    "stand",
    "standard",
    "standing",
    "star",
    "start",
    "starting",
    "state",
    "statement",
    "station",
    "status",
    "stay",
    "steady",
    "steal",
    "steel",
    "step",
    "stick",
    "still",
    "stock",
    "stomach",
    "stone",
    "stood",
    "stop",
    "storage",
    "store",
    "storm",
    "story",
    "straight",
    "strain",
    "strand",
    "strange",
    "stranger",
    "strategy",
    "stream",
    "street",
    "strength",
    "stress",
    "stretch",
    "strike",
    "striking",
    "string",
    "strip",
    "stroke",
    "strong",
    "strongly",
    "structure",
    "struggle",
    "stuck",
    "student",
    "studio",
    "study",
    "studying",
    "stuff",
    "stupid",
    "style",
    "subject",
    "submission",
    "subsequent",
    "substance",
    "substantial",
    "substitute",
    "subtle",
    "succeed",
    "success",
    "successful",
    "successfully",
    "such",
    "sudden",
    "suddenly",
    "suffer",
    "sufficient",
    "sugar",
    "suggest",
    "suggestion",
    "suit",
    "suitable",
    "suited",
    "sum",
    "summary",
    "summer",
    "sun",
    "sunday",
    "super",
    "superior",
    "supervision",
    "supervisor",
    "supper",
    "supply",
    "support",
    "supporter",
    "suppose",
    "sure",
    "surely",
    "surface",
    "surgery",
    "surprise",
    "surprised",
    "surprising",
    "surround",
    "survey",
    "survive",
    "suspect",
    "sustain",
    "sweet",
    "swim",
    "swimming",
    "swing",
    "switch",
    "symbol",
    "sympathetic",
    "sympathy",
    "system",
    "table",
    "tackle",
    "tail",
    "take",
    "taking",
    "tale",
    "talent",
    "talk",
    "talking",
    "tall",
    "tank",
    "tap",
    "tape",
    "target",
    "task",
    "taste",
    "tax",
    "taxi",
    "tea",
    "teach",
    "teacher",
    "teaching",
    "team",
    "tear",
    "technical",
    "technique",
    "technology",
    "telephone",
    "television",
    "tell",
    "telling",
    "temperature",
    "temple",
    "temporary",
    "ten",
    "tend",
    "tendency",
    "tennis",
    "tension",
    "tent",
    "term",
    "terms",
    "terrible",
    "territory",
    "terror",
    "test",
    "testing",
    "text",
    "than",
    "thank",
    "thanks",
    "that",
    "theatre",
    "their",
    "them",
    "theme",
    "themselves",
    "then",
    "theory",
    "therapy",
    "there",
    "therefore",
    "these",
    "they",
    "thick",
    "thin",
    "thing",
    "think",
    "thinking",
    "third",
    "thirsty",
    "thirteen",
    "thirty",
    "this",
    "thorough",
    "thoroughly",
    "those",
    "though",
    "thought",
    "thousand",
    "threat",
    "threaten",
    "three",
    "threw",
    "through",
    "throughout",
    "throw",
    "thus",
    "ticket",
    "tide",
    "tie",
    "tight",
    "till",
    "time",
    "timing",
    "tiny",
    "tip",
    "tired",
    "title",
    "tobacco",
    "today",
    "toe",
    "together",
    "toilet",
    "tokyo",
    "told",
    "tomorrow",
    "tone",
    "tongue",
    "tonight",
    "too",
    "took",
    "tool",
    "tooth",
    "top",
    "topic",
    "total",
    "totally",
    "touch",
    "tough",
    "tour",
    "tourist",
    "tournament",
    "towards",
    "town",
    "toy",
    "track",
    "trade",
    "trading",
    "tradition",
    "traditional",
    "traffic",
    "train",
    "training",
    "transfer",
    "transform",
    "transport",
    "transportation",
    "trap",
    "travel",
    "travelling",
    "treat",
    "treatment",
    "tree",
    "trend",
    "trial",
    "trick",
    "trip",
    "tropical",
    "trouble",
    "truck",
    "true",
    "truly",
    "trust",
    "truth",
    "try",
    "trying",
    "tube",
    "tuesday",
    "tune",
    "tunnel",
    "turn",
    "turning",
    "twelve",
    "twenty",
    "twice",
    "twin",
    "two",
    "type",
    "typical",
    "typically",
    "ugly",
    "ultimate",
    "ultimately",
    "unable",
    "uncle",
    "under",
    "undergo",
    "understand",
    "understanding",
    "unemployment",
    "unfortunate",
    "unfortunately",
    "unhappy",
    "uniform",
    "union",
    "unique",
    "unit",
    "unite",
    "united",
    "unity",
    "universe",
    "university",
    "unknown",
    "unless",
    "unlike",
    "unlikely",
    "until",
    "unusual",
    "up",
    "upon",
    "upper",
    "upset",
    "urban",
    "urge",
    "urgent",
    "us",
    "use",
    "used",
    "useful",
    "user",
    "usual",
    "usually",
    "utility",
    "vacant",
    "vacation",
    "valley",
    "valuable",
    "value",
    "van",
    "variety",
    "various",
    "vary",
    "vast",
    "vegetable",
    "vehicle",
    "venture",
    "version",
    "versus",
    "very",
    "vessel",
    "victim",
    "victory",
    "video",
    "view",
    "village",
    "violence",
    "violent",
    "virtual",
    "virtue",
    "virus",
    "visible",
    "vision",
    "visit",
    "visitor",
    "visual",
    "vital",
    "voice",
    "volume",
    "voluntary",
    "volunteer",
    "vote",
    "wage",
    "wait",
    "waiting",
    "wake",
    "walk",
    "walking",
    "wall",
    "want",
    "wanting",
    "war",
    "ward",
    "warm",
    "warn",
    "warning",
    "wash",
    "waste",
    "watch",
    "watching",
    "water",
    "wave",
    "way",
    "ways",
    "weak",
    "weakness",
    "wealth",
    "weapon",
    "wear",
    "wearing",
    "weather",
    "web",
    "website",
    "wedding",
    "wednesday",
    "week",
    "weekend",
    "weekly",
    "weight",
    "welcome",
    "welfare",
    "well",
    "west",
    "western",
    "wet",
    "what",
    "whatever",
    "wheel",
    "when",
    "whenever",
    "where",
    "whereas",
    "whereby",
    "wherever",
    "whether",
    "which",
    "whichever",
    "while",
    "whilst",
    "white",
    "who",
    "whoever",
    "whole",
    "whom",
    "whose",
    "why",
    "wide",
    "widely",
    "wider",
    "widespread",
    "wife",
    "wild",
    "will",
    "willing",
    "win",
    "wind",
    "window",
    "wine",
    "wing",
    "winner",
    "winning",
    "winter",
    "wire",
    "wise",
    "wish",
    "with",
    "withdraw",
    "within",
    "without",
    "witness",
    "woman",
    "women",
    "won",
    "wonder",
    "wonderful",
    "wood",
    "wooden",
    "wool",
    "word",
    "words",
    "work",
    "worker",
    "working",
    "workplace",
    "works",
    "workshop",
    "world",
    "worldwide",
    "worn",
    "worried",
    "worry",
    "worse",
    "worship",
    "worst",
    "worth",
    "would",
    "write",
    "writer",
    "writing",
    "written",
    "wrong",
    "wrote",
    "yard",
    "yeah",
    "year",
    "years",
    "yellow",
    "yes",
    "yesterday",
    "yet",
    "yield",
    "you",
    "young",
    "younger",
    "your",
    "yours",
    "yourself",
    "youth",
    "zone",
];

/// Real HTTP API client implementation
pub struct RealApiClient {
    client: Client,
    api_keys: HashMap<ProviderId, String>,
    api_models: HashMap<ProviderId, String>,
    #[allow(dead_code)]
    request_timeout_ms: u64,
}

impl RealApiClient {
    /// Create new API client with explicit keys and models
    pub fn new(api_keys: HashMap<ProviderId, String>, request_timeout_ms: u64) -> Self {
        // Load models from environment variables, with fallbacks
        let api_models = Self::load_models_from_env();
        
        let client = Client::builder()
            .timeout(std::time::Duration::from_millis(request_timeout_ms))
            .build()
            .expect("Failed to create HTTP client");

        Self {
            client,
            api_keys,
            api_models,
            request_timeout_ms,
        }
    }

    /// Create new API client with both keys and models from environment
    pub fn new_from_env(request_timeout_ms: u64) -> Self {
        let api_keys = Self::load_keys_from_env();
        let api_models = Self::load_models_from_env();
        
        let client = Client::builder()
            .timeout(std::time::Duration::from_millis(request_timeout_ms))
            .build()
            .expect("Failed to create HTTP client");

        Self {
            client,
            api_keys,
            api_models,
            request_timeout_ms,
        }
    }

    /// Load API keys from environment variables
    fn load_keys_from_env() -> HashMap<ProviderId, String> {
        use std::env;
        
        let mut keys = HashMap::new();
        
        // Load OpenAI key
        if let Ok(key) = env::var("OPENAI_API_KEY") {
            keys.insert(ProviderId::OpenAI, key.trim().to_string());
        }
        
        // Load Anthropic key
        if let Ok(key) = env::var("ANTHROPIC_API_KEY") {
            keys.insert(ProviderId::Anthropic, key.trim().to_string());
        }
        
        // Load Gemini key
        if let Ok(key) = env::var("GEMINI_API_KEY") {
            keys.insert(ProviderId::Gemini, key.trim().to_string());
        }
        
        // Load Random provider key
        if let Ok(key) = env::var("RANDOM_API_KEY") {
            keys.insert(ProviderId::Random, key.trim().to_string());
        }
        
        keys
    }

    /// Load API models from environment variables
    fn load_models_from_env() -> HashMap<ProviderId, String> {
        use std::env;
        
        let mut models = HashMap::new();
        
        // Load models with fallbacks to defaults
        let openai_model = env::var("OPENAI_API_MODEL").unwrap_or_else(|_| "gpt-4o-mini".to_string());
        models.insert(ProviderId::OpenAI, openai_model.trim().to_string());
        
        let anthropic_model = env::var("ANTHROPIC_API_MODEL").unwrap_or_else(|_| "claude-3-5-sonnet-20241022".to_string());
        models.insert(ProviderId::Anthropic, anthropic_model.trim().to_string());
        
        let gemini_model = env::var("GEMINI_API_MODEL").unwrap_or_else(|_| "gemini-2.5-flash".to_string());
        models.insert(ProviderId::Gemini, gemini_model.trim().to_string());
        
        let random_model = env::var("RANDOM_API_MODEL").unwrap_or_else(|_| "random".to_string());
        models.insert(ProviderId::Random, random_model.trim().to_string());
        
        models
    }

    /// Get the model name for a provider
    fn get_model(&self, provider: ProviderId) -> &str {
        self.api_models.get(&provider)
            .map(|s| s.as_str())
            .unwrap_or_else(|| {
                // Fallback to hardcoded defaults
                match provider {
                    ProviderId::OpenAI => "gpt-4o-mini",
                    ProviderId::Anthropic => "claude-3-5-sonnet-20241022", 
                    ProviderId::Gemini => "gemini-2.5-flash",
                    ProviderId::Random => "random",
                }
            })
    }

    /// Get API endpoint URL for provider
    fn get_endpoint_url(&self, provider: ProviderId) -> String {
        match provider {
            ProviderId::OpenAI => "https://api.openai.com/v1/chat/completions".to_string(),
            ProviderId::Anthropic => "https://api.anthropic.com/v1/messages".to_string(),
            ProviderId::Gemini => {
                let model = self.get_model(provider);
                format!("https://generativelanguage.googleapis.com/v1beta/models/{}:generateContent", model)
            },
            ProviderId::Random => "local://random".to_string(), // Not used for HTTP requests
        }
    }

    /// Build request headers for provider
    fn build_headers(&self, provider: ProviderId) -> Result<reqwest::header::HeaderMap, ProducerError> {
        let mut headers = reqwest::header::HeaderMap::new();
        headers.insert("Content-Type", "application/json".parse().unwrap());

        match provider {
            ProviderId::Random => {
                // Random provider doesn't need headers or API keys
                return Ok(headers);
            }
            _ => {
                let api_key = self
                    .api_keys
                    .get(&provider)
                    .ok_or_else(|| ProducerError::config(format!("Missing API key for {provider:?}")))?;

                match provider {
                    ProviderId::OpenAI => {
                        let auth_value = format!("Bearer {api_key}");
                        headers.insert(
                            "Authorization",
                            auth_value
                                .parse()
                                .map_err(|_| ProducerError::config("Invalid OpenAI API key format"))?,
                        );
                        process_debug!(ProcessId::current(), "🔑 OpenAI authentication header configured");
                    }
                    ProviderId::Anthropic => {
                        headers.insert(
                            "x-api-key",
                            api_key
                                .parse()
                                .map_err(|_| ProducerError::config("Invalid Anthropic API key format"))?,
                        );
                        headers.insert("anthropic-version", "2023-06-01".parse().unwrap());  // Latest stable API version
                    }
                    ProviderId::Gemini => {
                        // Gemini uses API key as URL parameter
                    }
                    ProviderId::Random => unreachable!(), // Already handled above
                }
            }
        }

        Ok(headers)
    }

    /// Build request body for provider
    fn build_request_body(&self, provider: ProviderId, request: &ApiRequest) -> Value {
        process_debug!(
            ProcessId::current(),
            "🔧 Building API request body for {:?} with prompt: '{}'",
            provider,
            request.prompt
        );
        
        match provider {
            ProviderId::OpenAI => json!({
                "model": self.get_model(provider),  // Load from environment
                "messages": [{
                    "role": "user",
                    "content": request.prompt
                }],
                "max_tokens": request.max_tokens,
                "temperature": request.temperature,
                "n": 1,
                "stream": false
            }),
            ProviderId::Anthropic => json!({
                "model": self.get_model(provider),  // Load from environment
                "max_tokens": request.max_tokens,
                "temperature": request.temperature,
                "messages": [{
                    "role": "user",
                    "content": request.prompt
                }],
                "stream": false
            }),
            ProviderId::Gemini => json!({
                "contents": [{
                    "parts": [{
                        "text": request.prompt
                    }]
                }],
                "generationConfig": {
                    "maxOutputTokens": request.max_tokens,
                    "temperature": request.temperature
                }
            }),
            ProviderId::Random => json!({
                // Random provider doesn't use request body for HTTP
                "provider": "random",
                "max_tokens": request.max_tokens
            }),
        }
    }

    /// Extract content from provider response
    fn extract_content(&self, provider: ProviderId, response: &Value) -> ProducerResult<String> {
        match provider {
            ProviderId::OpenAI => response["choices"][0]["message"]["content"]
                .as_str()
                .ok_or_else(|| ProducerError::api("OpenAI", "Invalid response format"))
                .map(|s| s.to_string()),
            ProviderId::Anthropic => response["content"][0]["text"]
                .as_str()
                .ok_or_else(|| ProducerError::api("Anthropic", "Invalid response format"))
                .map(|s| s.to_string()),
            ProviderId::Gemini => response["candidates"][0]["content"]["parts"][0]["text"]
                .as_str()
                .ok_or_else(|| ProducerError::api("Gemini", "Invalid response format"))
                .map(|s| s.to_string()),
            ProviderId::Random => {
                // For Random provider, this should not be called since we handle it directly
                Err(ProducerError::api(
                    "Random",
                    "extract_content should not be called for Random provider",
                ))
            }
        }
    }

    /// Extract detailed token usage from provider response
    fn extract_tokens(&self, provider: ProviderId, response: &Value) -> TokenUsage {
        match provider {
            ProviderId::OpenAI => {
                let input_tokens = response["usage"]["prompt_tokens"].as_u64().unwrap_or(0);
                let output_tokens = response["usage"]["completion_tokens"].as_u64().unwrap_or(0);
                TokenUsage { input_tokens, output_tokens }
            }
            ProviderId::Anthropic => {
                let input_tokens = response["usage"]["input_tokens"].as_u64().unwrap_or(0);
                let output_tokens = response["usage"]["output_tokens"].as_u64().unwrap_or(0);
                TokenUsage { input_tokens, output_tokens }
            }
            ProviderId::Gemini => {
                // Gemini doesn't always return token counts, estimate from content length
                let content = self.extract_content(provider, response).unwrap_or_default();
                let total_estimate = (content.len() / 4) as u64; // Rough estimate: 4 characters per token
                // Assume 80% input, 20% output for estimation
                let input_tokens = (total_estimate as f64 * 0.8) as u64;
                let output_tokens = total_estimate - input_tokens;
                TokenUsage { input_tokens, output_tokens }
            }
            ProviderId::Random => {
                // Random provider token usage estimation (roughly 1 token per word)
                let total_estimate = response["word_count"].as_u64().unwrap_or(100);
                // Random provider: assume 50% input, 50% output for estimation
                let input_tokens = total_estimate / 2;
                let output_tokens = total_estimate - input_tokens;
                TokenUsage { input_tokens, output_tokens }
            }
        }
    }

    /// Generate random words for Random provider
    fn generate_random_words(&self, max_tokens: u32) -> String {
        let word_count = std::cmp::min(max_tokens as usize, RANDOM_WORDS.len());
        let mut rng = thread_rng();

        // Select random words without replacement
        let selected_words: Vec<&str> = RANDOM_WORDS.choose_multiple(&mut rng, word_count).copied().collect();

        selected_words.join(" ")
    }

    /// Handle Random provider request (local generation, no HTTP)
    async fn handle_random_request(&self, request: ApiRequest, start_time: Instant) -> ProducerResult<ApiResponse> {
        // Add small delay to simulate API call time
        tokio::time::sleep(tokio::time::Duration::from_millis(
            50 + (request.max_tokens as u64 / 10),
        ))
        .await;

        let content = self.generate_random_words(request.max_tokens);
        let word_count = content.split_whitespace().count() as u32;
        let response_time_ms = start_time.elapsed().as_millis() as u64;

        // Simulate realistic token usage for input/output, respecting max_tokens limit
        let input_tokens = (request.prompt.len() / 4) as u32; // Rough estimate: 4 chars per token
        let output_tokens = word_count;
        let total_tokens = std::cmp::min(input_tokens + output_tokens, request.max_tokens);

        info!(
            "🎲 Generated {} words (input: {} tokens, output: {} tokens, total: {}) in {}ms",
            word_count, input_tokens, output_tokens, total_tokens, response_time_ms
        );

        Ok(ApiResponse {
            provider: request.provider,
            request_id: request.request_id,
            content,
            tokens_used: TokenUsage { input_tokens: input_tokens as u64, output_tokens: output_tokens as u64 },
            response_time_ms,
            timestamp: chrono::Utc::now(),
            success: true,
            error_message: None,
        })
    }
}

#[async_trait]
impl ApiClient for RealApiClient {
    async fn send_request(&self, request: ApiRequest) -> ProducerResult<ApiResponse> {
        let start_time = Instant::now();

        process_debug!(
            ProcessId::current(),
            "🎯 API Client received request with prompt: '{}' for provider {:?}",
            request.prompt,
            request.provider
        );

        // Handle Random provider separately - no HTTP request needed
        if request.provider == ProviderId::Random {
            return self.handle_random_request(request, start_time).await;
        }

        // Build request for real API providers
        let url = self.get_endpoint_url(request.provider);
        let headers = self.build_headers(request.provider)?;
        let body = self.build_request_body(request.provider, &request);

        // For Gemini, add API key as query parameter (but don't log it)
        let request_builder = if request.provider == ProviderId::Gemini {
            let api_key = self
                .api_keys
                .get(&request.provider)
                .ok_or_else(|| ProducerError::config("Missing Gemini API key"))?;
            self.client.post(&url).query(&[("key", api_key)])
        } else {
            self.client.post(&url)
        };

        process_debug!(
            ProcessId::current(),
            "🌐 Making HTTP POST to: {} with prompt in body",
            url
        );
        process_debug!(
            ProcessId::current(),
            "📄 Request body contains prompt: '{}'",
            request.prompt
        );
        debug!("📋 Request headers: [REDACTED - contains API keys]");
        debug!(
            "📄 Full request body: {}",
            serde_json::to_string_pretty(&body).unwrap_or_default()
        );

        // Send request
        let response = match request_builder.headers(headers).json(&body).send().await {
            Ok(resp) => resp,
            Err(e) => {
                error!("Request to {:?} failed: {}", request.provider, e);
                return Ok(ApiResponse {
                    provider: request.provider,
                    request_id: request.request_id,
                    content: String::new(),
                    tokens_used: TokenUsage { input_tokens: 0, output_tokens: 0 },
                    response_time_ms: start_time.elapsed().as_millis() as u64,
                    timestamp: chrono::Utc::now(),
                    success: false,
                    error_message: Some(e.to_string()),
                });
            }
        };

        let response_time_ms = start_time.elapsed().as_millis() as u64;

        if !response.status().is_success() {
            let status = response.status();
            let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
            warn!("API request failed with status {}: {}", status, error_text);

            return Ok(ApiResponse {
                provider: request.provider,
                request_id: request.request_id,
                content: String::new(),
                tokens_used: TokenUsage { input_tokens: 0, output_tokens: 0 },
                response_time_ms,
                timestamp: chrono::Utc::now(),
                success: false,
                error_message: Some(format!("HTTP {status}: {error_text}")),
            });
        }

        // Parse response
        let response_json: Value = match response.json().await {
            Ok(json) => json,
            Err(e) => {
                error!("Failed to parse response JSON: {}", e);
                return Ok(ApiResponse {
                    provider: request.provider,
                    request_id: request.request_id,
                    content: String::new(),
                    tokens_used: TokenUsage { input_tokens: 0, output_tokens: 0 },
                    response_time_ms,
                    timestamp: chrono::Utc::now(),
                    success: false,
                    error_message: Some(format!("JSON parsing error: {e}")),
                });
            }
        };

        // Extract content and tokens
        let content = match self.extract_content(request.provider, &response_json) {
            Ok(content) => content,
            Err(e) => {
                error!("Failed to extract content from response: {}", e);
                return Ok(ApiResponse {
                    provider: request.provider,
                    request_id: request.request_id,
                    content: String::new(),
                    tokens_used: TokenUsage { input_tokens: 0, output_tokens: 0 },
                    response_time_ms,
                    timestamp: chrono::Utc::now(),
                    success: false,
                    error_message: Some(e.to_string()),
                });
            }
        };

        let tokens_used = self.extract_tokens(request.provider, &response_json);

        process_debug!(
            ProcessId::current(),
            "✅ Received response from {:?}: {} tokens (input: {}, output: {}), {}ms",
            request.provider,
            tokens_used.total(),
            tokens_used.input_tokens,
            tokens_used.output_tokens,
            response_time_ms
        );

        Ok(ApiResponse {
            provider: request.provider,
            request_id: request.request_id,
            content,
            tokens_used,
            response_time_ms,
            timestamp: chrono::Utc::now(),
            success: true,
            error_message: None,
        })
    }

    async fn health_check(&self, provider: ProviderId) -> ProducerResult<bool> {
        // Simple health check - verify we have API key for all providers (including Random for consistency)
        Ok(self.api_keys.contains_key(&provider))
    }

    fn estimate_cost(&self, provider: ProviderId, tokens: &TokenUsage) -> f64 {
        // Updated cost estimates (per 1K tokens) based on 2025 pricing
        let (input_cost_per_1k, output_cost_per_1k) = match provider {
            ProviderId::OpenAI => (0.00015, 0.0006),   // GPT-4o-mini: $0.15/1M input, $0.60/1M output
            ProviderId::Anthropic => (0.003, 0.015),   // Claude-3.5 Sonnet: $3/1M input, $15/1M output  
            ProviderId::Gemini => (0.000075, 0.0003),  // Gemini 2.5 Flash: $0.075/1M input, $0.30/1M output
            ProviderId::Random => (0.0001, 0.0001),    // Random provider minimal cost for testing
        };

        let input_cost = (tokens.input_tokens as f64 / 1000.0) * input_cost_per_1k;
        let output_cost = (tokens.output_tokens as f64 / 1000.0) * output_cost_per_1k;
        
        input_cost + output_cost
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::Utc;
    use uuid::Uuid;

    fn create_test_api_keys() -> HashMap<ProviderId, String> {
        let mut keys = HashMap::new();
        keys.insert(ProviderId::OpenAI, "test-openai-key".to_string());
        keys.insert(ProviderId::Anthropic, "test-anthropic-key".to_string());
        keys.insert(ProviderId::Gemini, "test-gemini-key".to_string());
        keys.insert(ProviderId::Random, "random".to_string());
        keys
    }

    fn create_test_request(provider: ProviderId) -> ApiRequest {
        ApiRequest {
            provider,
            prompt: "Test prompt".to_string(),
            max_tokens: 100,
            temperature: 0.7,
            request_id: Uuid::new_v4(),
            timestamp: Utc::now(),
        }
    }

    #[test]
    fn test_api_client_creation() {
        let api_keys = create_test_api_keys();
        let client = RealApiClient::new(api_keys.clone(), 30000);

        assert_eq!(client.api_keys, api_keys);
        assert_eq!(client.request_timeout_ms, 30000);
    }

    #[test]
    fn test_endpoint_urls() {
        let client = RealApiClient::new(create_test_api_keys(), 30000);

        assert_eq!(
            client.get_endpoint_url(ProviderId::OpenAI),
            "https://api.openai.com/v1/chat/completions"
        );
        assert_eq!(
            client.get_endpoint_url(ProviderId::Anthropic),
            "https://api.anthropic.com/v1/messages"
        );
        assert_eq!(
            client.get_endpoint_url(ProviderId::Gemini),
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"
        );
    }

    #[test]
    fn test_cost_estimation() {
        let client = RealApiClient::new(create_test_api_keys(), 30000);

        let tokens_1k_input = TokenUsage { input_tokens: 1000, output_tokens: 0 };
        let tokens_1k_output = TokenUsage { input_tokens: 0, output_tokens: 1000 };
        let tokens_mixed = TokenUsage { input_tokens: 500, output_tokens: 500 };
        
        // Test input-only costs
        assert_eq!(client.estimate_cost(ProviderId::OpenAI, &tokens_1k_input), 0.00015);
        assert_eq!(client.estimate_cost(ProviderId::Anthropic, &tokens_1k_input), 0.003);
        assert_eq!(client.estimate_cost(ProviderId::Gemini, &tokens_1k_input), 0.000075);

        // Test output-only costs (higher rates)
        assert_eq!(client.estimate_cost(ProviderId::OpenAI, &tokens_1k_output), 0.0006);
        
        // Test mixed input/output costs
        let expected_openai_mixed = (500.0 / 1000.0) * 0.00015 + (500.0 / 1000.0) * 0.0006;
        assert!((client.estimate_cost(ProviderId::OpenAI, &tokens_mixed) - expected_openai_mixed).abs() < 0.000001);
    }

    #[tokio::test]
    async fn test_health_check() {
        let client = RealApiClient::new(create_test_api_keys(), 30000);

        assert!(client.health_check(ProviderId::OpenAI).await.unwrap());
        assert!(client.health_check(ProviderId::Anthropic).await.unwrap());
        assert!(client.health_check(ProviderId::Gemini).await.unwrap());
        assert!(client.health_check(ProviderId::Random).await.unwrap());
    }

    #[tokio::test]
    async fn test_health_check_missing_key() {
        let client = RealApiClient::new(HashMap::new(), 30000);

        assert!(!client.health_check(ProviderId::OpenAI).await.unwrap());
        assert!(!client.health_check(ProviderId::Anthropic).await.unwrap());
        assert!(!client.health_check(ProviderId::Gemini).await.unwrap());
        assert!(!client.health_check(ProviderId::Random).await.unwrap());
    }

    #[test]
    fn test_request_body_building() {
        let client = RealApiClient::new(create_test_api_keys(), 30000);
        let request = create_test_request(ProviderId::OpenAI);

        let body = client.build_request_body(ProviderId::OpenAI, &request);

        assert_eq!(body["model"], "gpt-4o-mini");
        assert_eq!(body["messages"][0]["content"], "Test prompt");
        assert_eq!(body["max_tokens"], 100);
        assert!((body["temperature"].as_f64().unwrap() - 0.7).abs() < 0.001);
    }

    #[test]
    fn test_content_extraction() {
        let client = RealApiClient::new(create_test_api_keys(), 30000);

        // Test OpenAI response format
        let openai_response = json!({
            "choices": [{
                "message": {
                    "content": "Test response"
                }
            }]
        });

        let content = client.extract_content(ProviderId::OpenAI, &openai_response).unwrap();
        assert_eq!(content, "Test response");

        // Test Anthropic response format
        let anthropic_response = json!({
            "content": [{
                "text": "Anthropic response"
            }]
        });

        let content = client
            .extract_content(ProviderId::Anthropic, &anthropic_response)
            .unwrap();
        assert_eq!(content, "Anthropic response");
    }

    #[test]
    fn test_token_extraction() {
        let client = RealApiClient::new(create_test_api_keys(), 30000);

        // Test OpenAI usage format
        let openai_response = json!({
            "usage": {
                "prompt_tokens": 100,
                "completion_tokens": 50,
                "total_tokens": 150
            }
        });

        let tokens = client.extract_tokens(ProviderId::OpenAI, &openai_response);
        assert_eq!(tokens.input_tokens, 100);
        assert_eq!(tokens.output_tokens, 50);
        assert_eq!(tokens.total(), 150);

        // Test missing usage (should return 0)
        let empty_response = json!({});
        let tokens = client.extract_tokens(ProviderId::OpenAI, &empty_response);
        assert_eq!(tokens.input_tokens, 0);
        assert_eq!(tokens.output_tokens, 0);
    }
}
